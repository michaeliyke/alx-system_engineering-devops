#!/usr/bin/env bash
# Manages manage_my_process. (both files need to be pushed to git)
# Requirements:
# When passing the argument `start`:
	# Starts `manage_my_process`
	# Creates a file containing its PID in `/var/run/my_process.pid`
	# Displays `manage_my_process started`
# When passing the argument `stop`:
	# Stops `manage_my_process`
	# Deletes the file `/var/run/my_process.pid`
	# Displays `manage_my_process stopped`
# When passing the argument `restart`
	# Stops `manage_my_process`
	# Deletes the file `/var/run/my_process.pid`
	# Starts `manage_my_process`
	# Creates a file containing its PID in `/var/run/my_process.pid`
# Displays `manage_my_process restarted`

pid_f="/var/run/my_process.pid"

# Starts the manage_my_process process
function start_proc()
{
	# status: {started|restarted}
	status="$1"
	# Only run the contents if script is running as root user
	if [ "$EUID" -eq 0 ]; then
		./manage_my_process "$status"
		# pgrep -fn ./4-to_infinity_and_beyond -n flag shows the newest
	fi
}

# Confirm that the pid file exists
# 0 for true and 1 for false
function pid_f_exists()
{
		if [ -f "/var/run/my_process.pid" ]; then return 0; fi
		return 1
}

# Stops the manage_my_process process
function stop_proc()
{
	# Check that script is running as root user and that pid file exists
	if [ "$EUID" -eq 0 ] && [ -f $pid_f ]; then
		pid="$(cat $pid_f)"
		if [ -z "$pid" ]; then
			return 7
		fi
		kill -15 "$pid"
		rm $pid_f
		echo "manage_my_process stopped"
	fi
}

# Show script usage and exit
function show_usage()
{
	echo "Usage: manage_my_process {start|stop|restart}"
	exit 0
}




# Never more than 1 argument aside $0 of course
if (( $# > 1 )); then show_usage; fi

# You must pass an argument though
if (( $# == 0)); then show_usage; fi

case $1 in
	start)
	start_proc "started"
	;;

	stop)
	# Do not stop if process not already running
	if ! pid_f_exists ; then exit 0; fi
	stop_proc
	;;

	restart)
	# Do not restart if process not already running
	if ! pid_f_exists ; then exit 0; fi
	stop_proc
	start_proc "restarted"
		;;

	-p)
	# Show the current contents of the pid file
	cat "$pid_f"
		;;

	--pid)
	# Show the current contents of the pid file
	cat "$pid_f"
		;;

	*)
	# Warn for any other input
	show_usage
	;;
esac
